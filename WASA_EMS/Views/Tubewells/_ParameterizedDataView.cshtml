@using System.Data;
@using System.Data.SqlClient;
@using Newtonsoft.Json;
@model IEnumerable<TubewellParameterChartClass>

<style>
    .chartdiv {
        height: 500px;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {
        @Html.Raw(ViewData["chartData"])
        chart1.render();
        function toogleDataSeries(e) {
            if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
                e.dataSeries.visible = false;
            } else {
                e.dataSeries.visible = true;
            }
            chart1.render();
        }
    });
</script>


<script>
    am4core.ready(function () {

        // Themes begin
        am4core.useTheme(am4themes_animated);
        // Themes end

        // Create chart instance
        var chart1 = am4core.create("chartdiv1", am4charts.PieChart);
        var chart2 = am4core.create("chartdiv2", am4charts.PieChart);
        var chart3 = am4core.create("chartdiv3", am4charts.PieChart);
        var chart4 = am4core.create("chartdiv4", am4charts.PieChart);

        var chart5 = am4core.create("chartdiv5", am4charts.PieChart);
        var chart6 = am4core.create("chartdiv6", am4charts.PieChart);
        var chart7 = am4core.create("chartdiv7", am4charts.PieChart);

        var chart8 = am4core.create("chartdiv8", am4charts.PieChart);
        var chart9 = am4core.create("chartdiv9", am4charts.PieChart);

        // Add and configure Series
        var pieSeries1 = chart1.series.push(new am4charts.PieSeries());
        pieSeries1.dataFields.value = "Hours";
        pieSeries1.dataFields.category = "mode";

        // Let's cut a hole in our Pie chart the size of 30% the radius
        chart1.innerRadius = am4core.percent(30);

        @*let title = chart1.titles.create();
        title.text = '@Model.First().locationName';
        title.fontSize = 25;
        title.marginBottom = 30;*@

        @*let label = chart1.chartContainer.createChild(am4core.Label);
        label.text = '@Model.First().parameterName';
        label.align = "center";*@

        // Put a thick white border around each Slice
        pieSeries1.slices.template.stroke = am4core.color("#fff");
        pieSeries1.slices.template.strokeWidth = 2;
        pieSeries1.slices.template.strokeOpacity = 1;
        pieSeries1.slices.template
            // change the cursor on hover to make it apparent the object can be interacted with
            .cursorOverStyle = [
                {
                    "property": "cursor",
                    "value": "pointer"
                }
            ];
        
        pieSeries1.alignLabels = false;
        pieSeries1.labels.template.bent = true;
        pieSeries1.labels.template.radius = 3;
        pieSeries1.labels.template.padding(0, 0, 0, 0);

        pieSeries1.ticks.template.disabled = true;

        pieSeries1.labels.template.text = "{category}: {value.value}";
        pieSeries1.slices.template.tooltipText = "{category}: {value.value}";

        // Create a base filter effect (as if it's not there) for the hover to return to
        var shadow1 = pieSeries1.slices.template.filters.push(new am4core.DropShadowFilter);
        shadow1.opacity = 0;

        // Create hover state
        var hoverState1 = pieSeries1.slices.template.states.getKey("hover"); // normally we have to create the hover state, in this case it already exists

        // Slightly shift the shadow and make it more prominent on hover
        var hoverShadow1 = hoverState1.filters.push(new am4core.DropShadowFilter);
        hoverShadow1.opacity = 0.7;
        hoverShadow1.blur = 5;

        // Add a legend
        chart1.legend = new am4charts.Legend();


        chart1.legend.valueLabels.template.text = "{value.value}";
        
        chart1.data = [{
            "mode": "Working Hours",
            "Hours": @Model.First().workingInHours
        }, {
            "mode": "Non-Working Hours",
            "Hours": @Model.First().nonWorkingInHours
        }];



        var pieSeries2 = chart2.series.push(new am4charts.PieSeries());
        pieSeries2.dataFields.value = "Hours";
        pieSeries2.dataFields.category = "mode";

        // Let's cut a hole in our Pie chart the size of 30% the radius
        chart2.innerRadius = am4core.percent(30);
        

        // Put a thick white border around each Slice
        pieSeries2.slices.template.stroke = am4core.color("#fff");
        pieSeries2.slices.template.strokeWidth = 2;
        pieSeries2.slices.template.strokeOpacity = 1;
        pieSeries2.slices.template
            // change the cursor on hover to make it apparent the object can be interacted with
            .cursorOverStyle = [
                {
                    "property": "cursor",
                    "value": "pointer"
                }
            ];

        pieSeries2.alignLabels = false;
        pieSeries2.labels.template.bent = true;
        pieSeries2.labels.template.radius = 3;
        pieSeries2.labels.template.padding(0, 0, 0, 0);

        pieSeries2.ticks.template.disabled = true;

        pieSeries2.labels.template.text = "{category}: {value.value}";
        pieSeries2.slices.template.tooltipText = "{category}: {value.value}";

        // Create a base filter effect (as if it's not there) for the hover to return to
        var shadow2 = pieSeries2.slices.template.filters.push(new am4core.DropShadowFilter);
        shadow2.opacity = 0;

        // Create hover state
        var hoverState2 = pieSeries2.slices.template.states.getKey("hover"); // normally we have to create the hover state, in this case it already exists

        // Slightly shift the shadow and make it more prominent on hover
        var hoverShadow2 = hoverState2.filters.push(new am4core.DropShadowFilter);
        hoverShadow2.opacity = 0.7;
        hoverShadow2.blur = 5;

        // Add a legend
        chart2.legend = new am4charts.Legend();

        chart2.legend.valueLabels.template.text = "{value.value}";
        
        chart2.data = [{
            "mode": "Working Hours in Manual",
            "Hours": @Model.First().workingInHoursManual
        }, {
            "mode": "Total Hours",
            "Hours": @Model.First().totalHours
        }];


        

        var pieSeries3 = chart3.series.push(new am4charts.PieSeries());
        pieSeries3.dataFields.value = "Hours";
        pieSeries3.dataFields.category = "mode";

        // Let's cut a hole in our Pie chart the size of 30% the radius
        chart3.innerRadius = am4core.percent(30);
        

        // Put a thick white border around each Slice
        pieSeries3.slices.template.stroke = am4core.color("#fff");
        pieSeries3.slices.template.strokeWidth = 2;
        pieSeries3.slices.template.strokeOpacity = 1;
        pieSeries3.slices.template
            // change the cursor on hover to make it apparent the object can be interacted with
            .cursorOverStyle = [
                {
                    "property": "cursor",
                    "value": "pointer"
                }
            ];

        pieSeries3.alignLabels = false;
        pieSeries3.labels.template.bent = true;
        pieSeries3.labels.template.radius = 3;
        pieSeries3.labels.template.padding(0, 0, 0, 0);

        pieSeries3.ticks.template.disabled = true;

        pieSeries3.labels.template.text = "{category}: {value.value}";
        pieSeries3.slices.template.tooltipText = "{category}: {value.value}";

        // Create a base filter effect (as if it's not there) for the hover to return to
        var shadow3 = pieSeries3.slices.template.filters.push(new am4core.DropShadowFilter);
        shadow3.opacity = 0;

        // Create hover state
        var hoverState3 = pieSeries3.slices.template.states.getKey("hover"); // normally we have to create the hover state, in this case it already exists

        // Slightly shift the shadow and make it more prominent on hover
        var hoverShadow3 = hoverState3.filters.push(new am4core.DropShadowFilter);
        hoverShadow3.opacity = 0.7;
        hoverShadow3.blur = 5;

        // Add a legend
        chart3.legend = new am4charts.Legend();

        chart3.legend.valueLabels.template.text = "{value.value}";
        
        chart3.data = [{
            "mode": "Working Hours in Remote",
            "Hours": @Model.First().workingInHoursRemote
        }, {
            "mode": "Total Hours",
            "Hours": @Model.First().totalHours
        }];


        

        var pieSeries4 = chart4.series.push(new am4charts.PieSeries());
        pieSeries4.dataFields.value = "Hours";
        pieSeries4.dataFields.category = "mode";

        // Let's cut a hole in our Pie chart the size of 30% the radius
        chart4.innerRadius = am4core.percent(30);
        

        // Put a thick white border around each Slice
        pieSeries4.slices.template.stroke = am4core.color("#fff");
        pieSeries4.slices.template.strokeWidth = 2;
        pieSeries4.slices.template.strokeOpacity = 1;
        pieSeries4.slices.template
            // change the cursor on hover to make it apparent the object can be interacted with
            .cursorOverStyle = [
                {
                    "property": "cursor",
                    "value": "pointer"
                }
            ];

        pieSeries4.alignLabels = false;
        pieSeries4.labels.template.bent = true;
        pieSeries4.labels.template.radius = 3;
        pieSeries4.labels.template.padding(0, 0, 0, 0);

        pieSeries4.ticks.template.disabled = true;

        pieSeries4.labels.template.text = "{category}: {value.value}";
        pieSeries4.slices.template.tooltipText = "{category}: {value.value}";

        // Create a base filter effect (as if it's not there) for the hover to return to
        var shadow4 = pieSeries4.slices.template.filters.push(new am4core.DropShadowFilter);
        shadow4.opacity = 0;

        // Create hover state
        var hoverState4 = pieSeries4.slices.template.states.getKey("hover"); // normally we have to create the hover state, in this case it already exists

        // Slightly shift the shadow and make it more prominent on hover
        var hoverShadow4 = hoverState4.filters.push(new am4core.DropShadowFilter);
        hoverShadow4.opacity = 0.7;
        hoverShadow4.blur = 5;

        // Add a legend
        chart4.legend = new am4charts.Legend();

        chart4.legend.valueLabels.template.text = "{value.value}";
        
        chart4.data = [{
            "mode": "Working Hours in Scheduling",
            "Hours": @Model.First().workingInHoursScheduling
        }, {
            "mode": "Total Hours",
            "Hours": @Model.First().totalHours
        }];

        var pieSeries5 = chart5.series.push(new am4charts.PieSeries());
        pieSeries5.dataFields.value = "Hours";
        pieSeries5.dataFields.category = "mode";

        // Let's cut a hole in our Pie chart the size of 30% the radius
        chart5.innerRadius = am4core.percent(30);
        

        // Put a thick white border around each Slice
        pieSeries5.slices.template.stroke = am4core.color("#fff");
        pieSeries5.slices.template.strokeWidth = 2;
        pieSeries5.slices.template.strokeOpacity = 1;
        pieSeries5.slices.template
            // change the cursor on hover to make it apparent the object can be interacted with
            .cursorOverStyle = [
                {
                    "property": "cursor",
                    "value": "pointer"
                }
            ];

        pieSeries5.alignLabels = false;
        pieSeries5.labels.template.bent = true;
        pieSeries5.labels.template.radius = 3;
        pieSeries5.labels.template.padding(0, 0, 0, 0);

        pieSeries5.ticks.template.disabled = true;

        pieSeries5.labels.template.text = "{category}: {value.value}";
        pieSeries5.slices.template.tooltipText = "{category}: {value.value}";

        // Create a base filter effect (as if it's not there) for the hover to return to
        var shadow5 = pieSeries5.slices.template.filters.push(new am4core.DropShadowFilter);
        shadow5.opacity = 0;

        // Create hover state
        var hoverState5 = pieSeries5.slices.template.states.getKey("hover"); // normally we have to create the hover state, in this case it already exists

        // Slightly shift the shadow and make it more prominent on hover
        var hoverShadow5 = hoverState5.filters.push(new am4core.DropShadowFilter);
        hoverShadow5.opacity = 0.7;
        hoverShadow5.blur = 5;

        // Add a legend
        chart5.legend = new am4charts.Legend();

        chart5.legend.valueLabels.template.text = "{value.value}";
        
        chart5.data = [{
            "mode": "Available Hours",
            "Hours": @Model.First().availableHours
        }, {
            "mode": "Non-Available Hours",
            "Hours": @Model.First().nonAvailableHours
        }];

        var pieSeries6 = chart6.series.push(new am4charts.PieSeries());
        pieSeries6.dataFields.value = "Hours";
        pieSeries6.dataFields.category = "mode";

        // Let's cut a hole in our Pie chart the size of 30% the radius
        chart6.innerRadius = am4core.percent(30);
        

        // Put a thick white border around each Slice
        pieSeries6.slices.template.stroke = am4core.color("#fff");
        pieSeries6.slices.template.strokeWidth = 2;
        pieSeries6.slices.template.strokeOpacity = 1;
        pieSeries6.slices.template
            // change the cursor on hover to make it apparent the object can be interacted with
            .cursorOverStyle = [
                {
                    "property": "cursor",
                    "value": "pointer"
                }
            ];

        pieSeries6.alignLabels = false;
        pieSeries6.labels.template.bent = true;
        pieSeries6.labels.template.radius = 3;
        pieSeries6.labels.template.padding(0, 0, 0, 0);

        pieSeries6.ticks.template.disabled = true;

        pieSeries6.labels.template.text = "{category}: {value.value}";
        pieSeries6.slices.template.tooltipText = "{category}: {value.value}";

        // Create a base filter effect (as if it's not there) for the hover to return to
        var shadow6 = pieSeries6.slices.template.filters.push(new am4core.DropShadowFilter);
        shadow6.opacity = 0;

        // Create hover state
        var hoverState6 = pieSeries6.slices.template.states.getKey("hover"); // normally we have to create the hover state, in this case it already exists

        // Slightly shift the shadow and make it more prominent on hover
        var hoverShadow6 = hoverState6.filters.push(new am4core.DropShadowFilter);
        hoverShadow6.opacity = 0.7;
        hoverShadow6.blur = 5;

        // Add a legend
        chart6.legend = new am4charts.Legend();

        chart6.legend.valueLabels.template.text = "{value.value}";

        chart6.data = [{
            "mode": "Average @Model.First().parameterName of Working Hours",
            "Hours": @Model.First().avgOfAvailableHours
        }, {
            "mode": "Average @Model.First().parameterName of Non-Working Hours",
            "Hours": @Model.First().avgOfNonAvailableHours
        }];


        var pieSeries7 = chart7.series.push(new am4charts.PieSeries());
        pieSeries7.dataFields.value = "Hours";
        pieSeries7.dataFields.category = "mode";

        // Let's cut a hole in our Pie chart the size of 30% the radius
        chart7.innerRadius = am4core.percent(30);
        

        // Put a thick white border around each Slice
        pieSeries7.slices.template.stroke = am4core.color("#fff");
        pieSeries7.slices.template.strokeWidth = 2;
        pieSeries7.slices.template.strokeOpacity = 1;
        pieSeries7.slices.template
            // change the cursor on hover to make it apparent the object can be interacted with
            .cursorOverStyle = [
                {
                    "property": "cursor",
                    "value": "pointer"
                }
            ];

        pieSeries7.alignLabels = false;
        pieSeries7.labels.template.bent = true;
        pieSeries7.labels.template.radius = 3;
        pieSeries7.labels.template.padding(0, 0, 0, 0);

        pieSeries7.ticks.template.disabled = true;

        pieSeries7.labels.template.text = "{category}: {value.value}";
        pieSeries7.slices.template.tooltipText = "{category}: {value.value}";

        // Create a base filter effect (as if it's not there) for the hover to return to
        var shadow7 = pieSeries7.slices.template.filters.push(new am4core.DropShadowFilter);
        shadow7.opacity = 0;

        // Create hover state
        var hoverState7 = pieSeries7.slices.template.states.getKey("hover"); // normally we have to create the hover state, in this case it already exists

        // Slightly shift the shadow and make it more prominent on hover
        var hoverShadow7 = hoverState7.filters.push(new am4core.DropShadowFilter);
        hoverShadow7.opacity = 0.7;
        hoverShadow7.blur = 5;

        // Add a legend
        chart7.legend = new am4charts.Legend();

        chart7.legend.valueLabels.template.text = "{value.value}";
        
        chart7.data = [{
            "mode": "Minimun @Model.First().parameterName ",
            "Hours": @Model.First().minValue
        }, {
            "mode": "Maximum @Model.First().parameterName ",
            "Hours": @Model.First().maxValue
        }, {
            "mode": "Average @Model.First().parameterName ",
            "Hours": @Model.First().avgVale
        }];


        var pieSeries8 = chart8.series.push(new am4charts.PieSeries());
        pieSeries8.dataFields.value = "Hours";
        pieSeries8.dataFields.category = "mode";

        // Let's cut a hole in our Pie chart the size of 30% the radius
        chart8.innerRadius = am4core.percent(30);
        

        // Put a thick white border around each Slice
        pieSeries8.slices.template.stroke = am4core.color("#fff");
        pieSeries8.slices.template.strokeWidth = 2;
        pieSeries8.slices.template.strokeOpacity = 1;
        pieSeries8.slices.template
            // change the cursor on hover to make it apparent the object can be interacted with
            .cursorOverStyle = [
                {
                    "property": "cursor",
                    "value": "pointer"
                }
            ];

        pieSeries8.alignLabels = false;
        pieSeries8.labels.template.bent = true;
        pieSeries8.labels.template.radius = 3;
        pieSeries8.labels.template.padding(0, 0, 0, 0);

        pieSeries8.ticks.template.disabled = true;

        pieSeries8.labels.template.text = "{category}: {value.value}";
        pieSeries8.slices.template.tooltipText = "{category}: {value.value}";

        // Create a base filter effect (as if it's not there) for the hover to return to
        var shadow8 = pieSeries8.slices.template.filters.push(new am4core.DropShadowFilter);
        shadow8.opacity = 0;

        // Create hover state
        var hoverState8 = pieSeries8.slices.template.states.getKey("hover"); // normally we have to create the hover state, in this case it already exists

        // Slightly shift the shadow and make it more prominent on hover
        var hoverShadow8 = hoverState8.filters.push(new am4core.DropShadowFilter);
        hoverShadow8.opacity = 0.7;
        hoverShadow8.blur = 5;

        // Add a legend
        chart8.legend = new am4charts.Legend();

        chart8.legend.valueLabels.template.text = "{value.value}";

        chart8.data = [{
            "mode": "Average @Model.First().parameterName of Working Hours",
            "Hours": @Math.Round((Model.First().avgOfAvailableHours * 0.3), 2)
        }, {
            "mode": "Average @Model.First().parameterName of Non-Working Hours",
            "Hours": @Math.Round((Model.First().avgOfNonAvailableHours * 0.3), 2)
        }];


        var pieSeries9 = chart9.series.push(new am4charts.PieSeries());
        pieSeries9.dataFields.value = "Hours";
        pieSeries9.dataFields.category = "mode";

        // Let's cut a hole in our Pie chart the size of 30% the radius
        chart9.innerRadius = am4core.percent(30);
        

        // Put a thick white border around each Slice
        pieSeries9.slices.template.stroke = am4core.color("#fff");
        pieSeries9.slices.template.strokeWidth = 2;
        pieSeries9.slices.template.strokeOpacity = 1;
        pieSeries9.slices.template
            // change the cursor on hover to make it apparent the object can be interacted with
            .cursorOverStyle = [
                {
                    "property": "cursor",
                    "value": "pointer"
                }
            ];

        pieSeries9.alignLabels = false;
        pieSeries9.labels.template.bent = true;
        pieSeries9.labels.template.radius = 3;
        pieSeries9.labels.template.padding(0, 0, 0, 0);

        pieSeries9.ticks.template.disabled = true;

        pieSeries9.labels.template.text = "{category}: {value.value}";
        pieSeries9.slices.template.tooltipText = "{category}: {value.value}";

        // Create a base filter effect (as if it's not there) for the hover to return to
        var shadow9 = pieSeries9.slices.template.filters.push(new am4core.DropShadowFilter);
        shadow9.opacity = 0;

        // Create hover state
        var hoverState9 = pieSeries9.slices.template.states.getKey("hover"); // normally we have to create the hover state, in this case it already exists

        // Slightly shift the shadow and make it more prominent on hover
        var hoverShadow9 = hoverState9.filters.push(new am4core.DropShadowFilter);
        hoverShadow9.opacity = 0.7;
        hoverShadow9.blur = 5;

        // Add a legend
        chart9.legend = new am4charts.Legend();

        chart9.legend.valueLabels.template.text = "{value.value}";

        chart9.data = [{
            "mode": "Average @Model.First().parameterName of Working Hours",
            "Hours": @Math.Round((Model.First().avgOfAvailableHours / 0.3), 2)
        }, {
            "mode": "Average @Model.First().parameterName of Non-Working Hours",
            "Hours": @Math.Round((Model.First().avgOfNonAvailableHours / 0.3), 2)
        }];





    }); // end am4core.ready()
</script>

<div class="portlet-title">
    <div class="row" style="opacity:0.9">
        <div class="portlet-body">
            <div class="widget stacked">
                <div class="widget-content">
                    <div>
                        <center>
                            <div id="chartContainer1" style="width: 95%; height: 500px"></div>
                        </center>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<div class="portlet-title">
    <div class="row" style="opacity:0.9">
        <div class="portlet-body">
            <div class="widget stacked">
                <div class="widget-content">
                    <div>
                        <center>
                            @if (Model.First().parameterName == "Pump Status" ||
                                Model.First().parameterName == "Manual Mode" ||
                                Model.First().parameterName == "Remote Mode" ||
                                Model.First().parameterName == "Scheduling Mode")
                            {
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv1"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv2"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv3"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv4"></div>

                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv5" style="display:none !important"></div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv6" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv7" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv8" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv9" style="display:none !important"></div>
                            }
                            else if (Model.First().parameterName == "V12" ||
                                Model.First().parameterName == "V13" ||
                                Model.First().parameterName == "V23" ||
                                Model.First().parameterName == "V1N" ||
                                Model.First().parameterName == "V2N" ||
                                Model.First().parameterName == "V3N" ||
                                Model.First().parameterName == "I1" ||
                                Model.First().parameterName == "I2" ||
                                Model.First().parameterName == "I3" ||
                                Model.First().parameterName == "PF" ||
                                Model.First().parameterName == "PKVA" ||
                                Model.First().parameterName == "PKW" ||
                                Model.First().parameterName == "PKVAR" ||
                                Model.First().parameterName == "Water Flow (cfs)" ||
                                Model.First().parameterName == "Pressure(Bar)")
                            {
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv1" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv2" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv3" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv4" style="display:none !important"></div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv5"></div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv6"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv7" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv8" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv9" style="display:none !important"></div>
                            }
                            else if (Model.First().parameterName == "Voltage Trip" ||
                                Model.First().parameterName == "Current Trip" ||
                                Model.First().parameterName == "Priming Level" ||
                                Model.First().parameterName == "Chlorine Level" ||
                                Model.First().parameterName == "Indoor Lights" ||
                                Model.First().parameterName == "Outdoor Lights" ||
                                Model.First().parameterName == "Exhaust Fan")
                            {
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv1" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv2" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv3" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv4" style="display:none !important"></div>
                                <div class="col-md-12 col-sm-12 col-lg-12 chartdiv" id="chartdiv5"></div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv6" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv7" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv8" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv9" style="display:none !important"></div>
                            }
                            else if (Model.First().parameterName == "Vibration Velocity in (mm/s)")
                            {
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv1" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv2" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv3" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv4" style="display:none !important"></div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv5" style="display:none !important"></div>
                                <div class="col-md-12 col-sm-12 col-lg-12 chartdiv" id="chartdiv6"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv7" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv8" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv9" style="display:none !important"></div>
                            }
                            else if (Model.First().parameterName == "Vibration Acceleration in (m/s2)")
                            {
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv1" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv2" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv3" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv4" style="display:none !important"></div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv5" style="display:none !important"></div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv6" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv7" style="display:none !important"></div>
                                <div class="col-md-12 col-sm-12 col-lg-12 chartdiv" id="chartdiv8"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv9" style="display:none !important"></div>
                            }
                            else if (Model.First().parameterName == "Vibration Displacement in (um)")
                            {
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv1" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv2" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv3" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv4" style="display:none !important"></div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv5" style="display:none !important"></div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv6" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv7" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv8" style="display:none !important"></div>
                                <div class="col-md-12 col-sm-12 col-lg-12 chartdiv" id="chartdiv9"></div>
                            }
                            else if (Model.First().parameterName == "Frequency")
                            {
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv1" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv2" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv3" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv4" style="display:none !important"></div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv5" style="display:none !important"></div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv6" style="display:none !important"></div>
                                <div class="col-md-12 col-sm-12 col-lg-12 chartdiv" id="chartdiv7"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv8" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv9" style="display:none !important"></div>

                            }
                            else
                            {
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv1"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv2"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv3"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv4"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv5"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv6"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv7"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv8"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv9"></div>
                            }
                        </center>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>